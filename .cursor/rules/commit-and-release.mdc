---
alwaysApply: true
description: 提交信息与发布流程（Conventional Commits + semantic-release）
---
### 提交信息规范

- 采用 **Conventional Commits**，常用类型：`feat` `fix` `docs` `refactor` `chore` `test` `build` `ci` `perf` `style`。
- 作用域可选：`feat(router): ...`。
- 提交正文建议简洁明确；换行处可添加说明与动机。
- `commitlint` 规则：
  - 继承 `@commitlint/config-conventional`
  - `references-empty: [2, 'never']`（提交需包含 issue 引用，如 `Closes #123`）
  - `body-max-line-length: 500`（警告级别）

### 预提交与检查

- `lint-staged`：对 `*.{ts,tsx,vue,js,json,md,yml}` 执行 `eslint --fix`。
- `husky`：`prepare` 钩子已启用；建议配置 `commit-msg` 调用 `commitlint`。

### 版本与发布

- 使用 `semantic-release` 自动化发布（默认分支 `main`）。
- 插件：
  - `@semantic-release/commit-analyzer`
  - `@semantic-release/release-notes-generator`
  - `@semantic-release/changelog`（输出到 `CHANGELOG.md`）
  - `@semantic-release/npm`（`npmPublish: false`）
  - `@semantic-release/github`
  - `@semantic-release/git`（签名提交，回写 `CHANGELOG.md` 与 `package.json`）

### 常用命令

- 本地验证发布流程（不写入）：`pnpm release:dry-run`
- CI 发布：`pnpm release:ci`（会先构建再发布）

